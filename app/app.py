import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from catboost import CatBoostClassifier
from sklearn.preprocessing import StandardScaler


@st.cache_resource
def load_model(model_name):
    if model_name == "CatBoost":
        from_file = CatBoostClassifier()
        return from_file.load_model("models/cat_boost.cbm")
    with open(model_name, "rb") as f:
        return pickle.load(f)


@st.cache_data
def load_data(path_to_csv):
    return pd.read_csv(path_to_csv, index_col=0)


st.set_page_config(page_title="Fire Alarm ML Dashboard", layout="wide")
menu = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ", "–û –¥–∞—Ç–∞—Å–µ—Ç–µ", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])

if menu == "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ":
    st.title("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞")
    st.subheader("–î—Ä–æ–∂–∂–∞—á–∏—Ö –ê—Ä—Ç—ë–º –î–º–∏—Ç—Ä–∏–µ–≤–∏—á")
    st.text("–ì—Ä—É–ø–ø–∞: –§–ò–¢-231")
    st.markdown("**–¢–µ–º–∞ –†–ì–†:** –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–∞—à–±–æ—Ä–¥–∞) –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤—ã–≤–æ–¥–∞) –º–æ–¥–µ–ª–µ–π ML –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

elif menu == "–û –¥–∞—Ç–∞—Å–µ—Ç–µ":
    st.title("–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    st.markdown("""
    **–û–±–ª–∞—Å—Ç—å:** –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ–∂–∞—Ä–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ–Ω—Å–æ—Ä–æ–≤ –≤–æ–∑–¥—É—Ö–∞.

    **–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:** `Fire Alarm` (1 ‚Äî —Ç—Ä–µ–≤–æ–≥–∞, 0 ‚Äî –Ω–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏)

    **–ü—Ä–∏–∑–Ω–∞–∫–∏:**
    - `Temperature[C]`: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞  
    - `Humidity[%]`: –≤–ª–∞–∂–Ω–æ—Å—Ç—å  
    - `TVOC[ppb]`: –ª–µ—Ç—É—á–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è  
    - `eCO2[ppm]`: —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç CO‚ÇÇ  
    - `Raw H2`: –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–π –≤–æ–¥–æ—Ä–æ–¥  
    - `Raw Ethanol`: —ç—Ç–∞–Ω–æ–ª  
    - `Pressure[hPa]`: –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ  
    - `PM1.0`, `PM2.5`: –ø—ã–ª–µ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã  
    - `NC0.5`, `NC1.0`, `NC2.5`: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü  
    - `CNT`: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
    - `Day`: –î–µ–Ω—å –º–µ—Å—è—Ü–∞
    - `Hour`: –ß–∞—Å –≤ 24 —á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """)
    st.subheader("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
    - –í –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    - –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ–Ω–µ–Ω—ã –º–µ–¥–∏–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.
    - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ‚Äì –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    - –°—Ç–æ–ª–±–µ—Ü Fire Alarm –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ —Ç–∏–ø–∞ str –≤ bool.
    - –°—Ç–æ–ª–±–µ—Ü UTC –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ Datetime, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–µ–Ω—ã –¥–µ–Ω—å –∏ —á–∞—Å.
    """)


elif menu == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
    df = load_data("data/smoke_detector_task_preprocessed.csv")
    st.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    st.subheader("1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    fig1, ax1 = plt.subplots()
    sns.histplot(df['Temperature[C]'], kde=True, ax=ax1)
    st.pyplot(fig1)

    st.subheader("2. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
    fig2, ax2 = plt.subplots(figsize=(12, 8))
    sns.heatmap(df.corr(numeric_only=True), cmap='coolwarm', ax=ax2)
    st.pyplot(fig2)

    st.subheader("3. Boxplot: eCO2 –ø–æ —Ç—Ä–µ–≤–æ–≥–µ")
    fig3, ax3 = plt.subplots()
    sns.boxplot(data=df, x='Fire Alarm', y='eCO2[ppm]', ax=ax3)
    st.pyplot(fig3)

    st.subheader("4. –í–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏")
    fig4, ax4 = plt.subplots()
    sns.scatterplot(data=df, x='Temperature[C]', y='Humidity[%]', hue='Fire Alarm', ax=ax4)
    st.pyplot(fig4)


elif menu == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ–∂–∞—Ä–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏")

    mode = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", ["–†—É—á–Ω–æ–π –≤–≤–æ–¥", "–ó–∞–≥—Ä—É–∑–∫–∞ CSV"])

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    all_models = ["KNN", "Gradient Boosting", "CatBoost", "Bagging", "Stacking", "MLPClassifier"]
    # –¢–µ–ø–µ—Ä—å ‚Äî –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç
    selected_models = st.multiselect("–ú–æ–¥–µ–ª–∏:", all_models)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é
    @st.cache_resource
    def load_selected_model(name):
        if name == "KNN":
            return load_model("models/knn_model.pkl")
        elif name == "Gradient Boosting":
            return load_model("models/GradientBoostingClassifier_model.pkl")
        elif name == "CatBoost":
            return load_model("CatBoost")
        elif name == "Bagging":
            return load_model("models/BaggingClassifier_model.pkl")
        elif name == "Stacking":
            return load_model("models/StackingClassifier_model.pkl")
        elif name == "MLPClassifier":
            return load_model("models/MLP_classifier.pkl")
        else:
            return None  # –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
    models_dict = {}
    for name in selected_models:
        model_obj = load_selected_model(name)
        if model_obj is not None:
            models_dict[name] = model_obj

    # –†–µ–∂–∏–º ¬´–†—É—á–Ω–æ–π –≤–≤–æ–¥¬ª
    if mode == "–†—É—á–Ω–æ–π –≤–≤–æ–¥":
        st.subheader("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
        values = {}
        values['Temperature[C]'] = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)")
        values['Humidity[%]']    = st.number_input("–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)")
        values['TVOC[ppb]']      = st.number_input("TVOC (ppb)")
        values['eCO2[ppm]']      = st.number_input("eCO‚ÇÇ (ppm)")
        values['Raw H2']         = st.number_input("Raw H2")
        values['Raw Ethanol']    = st.number_input("Raw Ethanol")
        values['Pressure[hPa]']  = st.number_input("–î–∞–≤–ª–µ–Ω–∏–µ (hPa)")
        values['PM1.0']          = st.number_input("PM1.0")
        values['PM2.5']          = st.number_input("PM2.5")
        values['NC0.5']          = st.number_input("NC0.5")
        values['NC1.0']          = st.number_input("NC1.0")
        values['NC2.5']          = st.number_input("NC2.5")
        values['CNT']            = st.number_input("CNT")
        values['Day']            = st.number_input("Day", format="%d", step=1, min_value=1, max_value=31)
        values['Hour']           = st.number_input("Hour", format="%d", step=1, min_value=0, max_value=23)

        # –°–æ–±–∏—Ä–∞–µ–º –≤ DataFrame
        input_df = pd.DataFrame([values])

        if selected_models:
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            for name, model in models_dict.items():
                pred = model.predict(input_df)[0]
                result_text = "üî• –ü–æ–∂–∞—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!" if pred == 1 else "‚úÖ –í—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ."
                st.write(f"**{name}**: {result_text}")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")

    # –†–µ–∂–∏–º ¬´–ó–∞–≥—Ä—É–∑–∫–∞ CSV¬ª
    else:
        st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª")
        uploaded_file = st.file_uploader("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", type=["csv"])
        if uploaded_file:
            try:
                test_df = pd.read_csv(uploaded_file)
                if selected_models:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                    for name, model in models_dict.items():
                        preds = model.predict(test_df)
                        test_df[f"Prediction_{name.replace(' ', '_')}"] = preds
                    st.write(test_df.head())
                    st.success("–ü—Ä–µ–¥—Å–∫–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

